---
title: "Primeiro Teste de Raspagem no Bluesky"
author: "Thales de Fante Romão"
lang: pt-br
format: html
---

```{r}
#| label: setup
#| eval: true
#| warning: false

library(bskyr)
library(tidyverse)
library(readr)
library(jsonlite)
```

## dados da autenticação do usuário para a raspagem

Usando o login do Thales

```{r}
#| label: usuario-autenticação
actor <- 'ennoe.bsky.social'

auth <- 
  bs_auth(
    user = "ennoe.bsky.social", 
    pass = "omp6-axyy-kme6-i4gm"
  )
```

[Explicação do Bluesky sobre os app passwords](https://blueskyfeeds.com/faq-app-password)

## raspando páginas à procura da string `"league of legends"`

Raspagem de teste
- busca por post com uma palavra chave

```{r}
#| label: testando-search-posts

posts <- 
  bs_search_posts(
    query = '"league of legends" since:2024-08-30 until:2024-10-08',
    limit = 10,
    auth = auth
  ) 

posts |> 
  toJSON(pretty = TRUE)
```




texto da documentação da biblioteca `{blskyr}` que deixei aqui para encontrar mais fácil `r 2+2`

```
Arguments
query Character vector, length 1. character. Search query, Lucene query syntax is
recommended.
sort character. Order or results. Either 'top' or 'latest'
since character. Filter results for posts on or after the indicated datetime or ISO date
(YYYY-MM-DD).
until character. Filter results for posts before the indicated datetime or ISO date
(YYYY-MM-DD).
mentions character. Filter to posts which mention the given account.
author character. Filter to posts by the given account.
lang character. Filter to posts in the given language.
domain character. Filter to posts with URLs (facet links or embeds) linking to the given
domain (hostname). Server may apply hostname normalization.
url character. Filter to posts with links (facet links or embeds) pointing to this URL.
Server may apply URL normalization or fuzzy matching.
tag character. Filter to posts with the given tag (hashtag), based on rich-text facet or
tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with
’AND’ matching.
cursor Character, length 1. A cursor property from a prior response. Default: NULL.
limit Integer. Number of records to request. If over 100, multiple requests are made.
user Character. User name to log in with. Defaults to get_bluesky_user().
pass Character. App password to log in with. Defaults to get_bluesky_pass().
auth Authentication information. Defaults to bs_auth(user, pass).
clean Logical. Should output be cleaned into a tibble? Default: TRUE.

```

RESULTADO

[Página de documentação do bluesky](https://bsky.social/about/blog/05-31-2024-search)
com mais campos (keywords) que podem ser usadas nas queries


descobrindo as informações que a raspagem traz

Não sei de a formatação está correta


- `$uri` - código do post
- `$cid`` - código do post
- $author - código do post
- $handle - nome do *user*
- $displayName - nome escolhido pelo usuário
- $avatar - foto de perfil
- `$associated` > `$chat` > `$allowIncoming` (chr "followers")
- $activitySubscription > > $allowSubscriptions (chr "followers")
- $muted - mutado (false)
- $blockedBy - bloqueado (false)
- $createdAt - data de criação do usuário
- $type - app.bsky.feed.post
- $createdAt - data de criação do post
- $embed > $type > $external> $description - conteúdo do post
- $title - primeiras linhas do post se ele tiver um título
- $uri - um link colocado pelo usuário
- $type: chr "app.bsky.richtext.facet#tag" -  inicia a busca por #
- $tag - a # usada. ele também puxa os bytes da #
- $type: chr "app.bsky.richtext.facet#link" - inicia a busca pelo link colocado
- $text - conteúdo do post em si
- > $embed > $ > $type   : chr "app.bsky.embed.external#view"> external > -  RESUMO DO POST com $uri, $title, $description, $thumb - display do link
- $reply_count - quantidade de comentários
- $reposts_count - quantidade de compartilhamento "repost"
- $like_count - quantidade de curtidas
- $quote_count - deve ser quantidade de menções
- $indexed_at - data do post


```{r}
#| label: exportando-xlsx
#| eval: false

#Salvar um data frame chamado posts em um arquivo Excel chamado teste_raspagem_urls.xlsx, usando a função write_xlsx().
write_xlsx(posts, path = "teste_raspagem_urls.xlsx")
```


```{r}

#| label: transformando-em-URLs
#| eval: false
#acessa a coluna uri do dataframe posts
uris <- posts$uri  
print(uris)

convert_uri_to_url <- function(uri) {
   # Remove 'at://'
   clean <- sub("^at://", "", uri)
   # Divide em partes pelo último '/'
   parts <- strsplit(clean, "/")[[1]]
   did <- parts[1]
   post_id <- parts[length(parts)]
   paste0("https://bsky.app/profile/", did, "/post/", post_id)
 }

# Exemplo:
uris <- c("at://did:plc:kwssn4xujlrl4ybhzm5vt5mg/app.bsky.feed.post/3l5xjaj66js24")
urls <- sapply(uris, convert_uri_to_url)
print(urls)

```

```{r}

#| label: testando-convert-uri-to-url-sem-gpt
#| eval: true

bs_uri_to_url(
  'at://did:plc:ic6zqvuw5ulmfpjiwnhsr2ns/app.bsky.feed.post/3k7qmjev5lr2s'

  )
  

bs_url_to_uri(
  'https://bsky.app/profile/ennoe.bsky.social',
    auth = auth
  )



```


```{r}
#| label: exemplo-sub-dataframe
#| eval: false
posts |>
  select(uri, cid, author) |> 
  filter(author == "zé das couves") |> 
  summarize()
```

```{r}
#| label: testando-follows-suggestions
#| eval: true

follows_suggestions <- 
  bs_get_follow_suggestions(
    actor,
    user = user,
    pass = pass,
    auth = auth,
    
  )

print(follows_suggestions)

```

```{r}
#| label: testando-get-followers
#| eval: true

# retorna os perfis que seguem um determinado ator (usuário)

seguidores <-
  bs_get_followers(
    actor,
    cursor = NULL,
    limit = 10,
    auth = auth,
    clean = FALSE
  )    

print(seguidores)
```
Creio que funciona e as mesmas inforemações padrões

```{r}
#| label: testando-get-follows
#| eval: true

# retorna os perfis que seguem um determinado ator (usuário)

seguindo <-
  bs_get_follows(
    actor,
    cursor = NULL,
    limit = 1,
    auth = auth,
    clean = FALSE
  )    

print(seguindo)
```


```{r}
#| label: testando-get-actor-lists
#| eval: false
  lista_ator <- 
    bs_get_actor_lists(
    actor = 'chriskenny.bsky.social',
    cursor = NULL,
    limit = NULL,
    user = user,
    pass = pass,
    auth = auth,
    clean = TRUE
  )

print(lista_ator)

```

```{r}
#| label: testando-create-record
#| eval: false

# Ela envia um novo registro (como um post, like, repost, etc.) para o servidor da Bluesky, dentro de uma coleção específica (como app.bsky.feed.post ou app.bsky.feed.like)

#bs_create_record(
  
#collection,
#record,
#user = user,
#pass = pass,
#auth = auth,
#clean = TRUE
#)
```

```{r}
#| label: testando-extract-record-key
#| eval: false
key <-
  bs_extract_record_key(
    'https://bsky.app/profile/chriskenny.bsky.social/post/3lc5d6zspys2c'
    )

print(key)
```

```{r}
#| label: testando-actor-lists
#| eval: true
# Retorna todas as listas públicas associadas a um determinado usuário (ator) do Bluesky

puxarlista <- 
  bs_get_actor_lists(
  'ennoe.bsky.social',# Ex: 'usuario.bsky.social' ou 'did:plc:...'
  cursor = NULL,  # Para paginação de resultados
  limit = NULL,   # Número de listas a buscar (padrão: todas disponíveis)
  auth = auth,  # Objeto de autenticação
  clean = FALSE # Retorna um tibble limpo
)

print(puxarlista)
```

```{r}
#|label: testanto-actor-starter-packs
#|eval: true
# Starter packs são listas públicas de contas sugeridas para seguir — normalmente usadas para ajudar novos usuários a encontrar contas interessantes, confiáveis ou relevantes com base em temas (como “jornalismo”, “arte”, “ciência”, etc.).

bs_get_actor_starter_packs(
  actor,       
  cursor = NULL, 
  limit = NULL,   
  auth = auth,
  clean = FALSE                 
)
```


```{r}
#|label: testando-get-actor-suggest
#|eval: true

# obter uma lista de perfis (atores) sugeridos para você seguir no Bluesky, com base nas recomendações do sistema da plataforma.

atorsugestao <-
  bs_get_actor_suggestions(
  cursor = NULL,
  limit = 10,    # Quantidade de sugestões (acima de 100 = múltiplas requisições)
  auth = auth,  # Objeto de autenticação
  clean = FALSE
  )
print (atorsugestao)
```

O resultado desse chunk me intriga... Ele puxa campos como
- $did
- $handle: nome do usuário
- $displayName: nome escolhido pelo usuário
- $description: descrição ou bio do usuário
- $avatar: foto de perfil

```{r}
#| label: testando-feed-generator
#| eval: false

# Busca os posts de um feed personalizado, com base em um feed generator criado no Bluesky
#Para consumir feeds temáticos curados por terceiros
#Para análises sociais ou de conteúdo
# construir dashboards com categorias de conteúdo personalizadas

listafeedsdisponiveis <- 
  bs_get_feeds(
  actor, 
  cursor = NULL,
  limit = NULL,
  auth = auth,
  clean = FALSE
)

print(listafeedsdisponiveis)

retornapostmaisrecente <- 
  bs_get_feed(
  'https://bsky.app/profile/chriskenny.bsky.social/post/3lc5d6zspys2c',          # URI do feed generator
  cursor = NULL, #Para paginação (caso tenha muitos posts)
  limit = 1,  #Número máximo de posts (padrão depende do servidor; se > 100, faz múltiplas chamadas)
  auth = auth,
  clean = FALSE
)

print(retornapostmaisrecente)
```
Acho que essa função é mais para a criação de BOTS

```{r}
#| label: testando-get-list
#| eval: true

# No Bluesky, listas são coleções personalizadas de perfis, criadas para agrupar e organizar pessoas que você segue ou outras contas.

gerandolista <-
  bs_get_list(
  list = 'at://did:plc:ragtjsm2j2vknwkz3zp4oxrd/app.bsky.graph.list/3kmokjyuflk2g',        
  cursor = NULL,  
  limit = 1,  
  auth = auth,
  clean = FALSE
)

print(gerandolista)
```
Quando usar?

- Para consultar e analisar o conteúdo de listas específicas no Bluesky
- Para mostrar a composição de uma lista em dashboards ou relatórios
- Para gerenciar listas e seus membros via programação

```{r}
#| label: testando-get-likes
#| eval: false

# recupera postagens curtidas por um ator

pegarcurtidas <- 
  bs_get_likes(
  'ennoe.bsky.social',
  cursor = NULL,
  limit = 10,
  auth = auth,
  clean = FALSE
)

print(pegarcurtidas)
```


```{r}
#| label: testando-get-posts
#| eval: false

# busca um ou mais posts diretamente pela URL ou URI interna, e retorna seus conteúdos como uma tabela

bs_get_posts(
  'https://bsky.app/profile/chriskenny.bsky.social/post/3lc5d6zspys2c',
  auth = auth,
  clean = FALSE
  )
```


```{r}
#| label: testando-get-profile
#| eval: true

# obter as informações de perfil de um ou mais usuários (atores) do Bluesky.

bs_get_profile(
  'ennoe.bsky.social',
  auth = auth,
  clean = FALSE
)
```


```{r}
#| label: testando-get-record 
```
🧾 O que é um “registro” (record)?

Na arquitetura descentralizada do AT Protocol, tudo publicado é um registro em um repositório pessoal. Por exemplo:

Posts → coleção app.bsky.feed.post

Likes → coleção app.bsky.feed.like

Reposts → coleção app.bsky.feed.repost

Listas → coleção app.bsky.graph.list

Você precisa saber os 3 elementos: repo, collection, e rkey.

bs_get_record(
  repo = "bskyr.bsky.social",
  collection = "app.bsky.feed.post",
  rkey = "3kf2577exva2x"
)
Obs: Esse exemplo está "disfarçado" no formato de URL no manual:
https://bsky.app/profile/bskyr.bsky.social/post/3kf2577exva2x

A estrutura é:
repo = bskyr.bsky.social
collection = app.bsky.feed.post
rkey = 3kf2577exva2x

Essa função é mais baixa nível que bs_get_posts() (que já lida com essas partes para você).


A função bs_get_relationships() da biblioteca blskyr permite verificar os relacionamentos entre um usuário (ator) e outros usuários no Bluesky, como:

- Quem segue quem
- Quem foi bloqueado
- Quem foi silenciado


```{r}
#| label: testando-get-relationships
#| eval: true

bs_get_relationships(
  actor = 'ennoe.bsky.social',
  others = c('bskyr.bsky.social', 'simko.bsky.social', 'yasmelins.bsky.social'),
  auth = auth,
  clean = FALSE
)|> 
toJSON(pretty = TRUE)
```

```{r}
#| label: nao-testando-get-repost
#| eval: false
# resposta um post
```

```{r}
#| label: nao-testando-get-timeline
#| eval: false
# retorna os posts mais recentes das contas que o usuário segue, da mesma forma que aparecem no app do Bluesky.
```

```{r}
#| label: nao-testando-new-embed-external
#| eval: false
# cria um "preview" de um link externo (com título, descrição e thumbnail), para ser incluído dentro de um post via bs_post().
```

```{r}
#| label: nao-testando-new-list
#| eval: false
# bs_new_list() cria uma lista personalizada que pode servir para moderar, curar conteúdos ou como referência, com nome, propósito, descrição e avatar.
#pode ser útil AINDA

```

```{r}
#| label: nao-testando-post
#| eval: false

# bs_post Make a post on Bluesky Social

#bs_post(
#text,
#images,
#images_alt,
#video,
#video_alt,
#langs,
#reply,
#quote,
#embed = TRUE,
#emoji = TRUE,
#max_tries,
#created_at = bs_created_at(),
#user = get_bluesky_user(),
#pass = get_bluesky_pass(),
#auth = bs_auth(user, pass),
#clean = TRUE
#)
```


```{r}
#| label: nao-testando-resolve-handle
#| eval: false

#bs_resolve_handle() pega um handle do Bluesky e retorna o DID correspondente, que é um identificador único global usado para identificar contas de forma descentralizada.

```

```{r}
#| label: testando-search-actors
#| eval: true

# bs_search_actors() permite procurar perfis no Bluesky com base em uma consulta textual, retornando uma lista de contas que combinam com a busca. 

procurandoperfis <- 
  bs_search_actors(
    'league of legend', #query == texto da busca
    typeahead = FALSE, #se TRUE, faz uma busca tipo "sugestão enquanto digita" (autocomplete). Padrão: FALSE.
    cursor = NULL, #paginação a parti de uma resposta anterior
    limit = 2,
    auth = auth,
    clean = FALSE
)

print(procurandoperfis)

```

```{r}
#| label: nao-testando-has-bluesky-user
#| eval: false

#As funções has_bluesky_user() e get_bluesky_user() da biblioteca blskyr são utilitários para verificar e obter o nome de usuário (handle) usado para se autenticar no Bluesky, geralmente de forma automatizada (como via variável de ambiente ou configuração interna).

#Essas funções geralmente pegam o valor de uma variável de ambiente configurada previamente, como:
#Sys.setenv(BLUESKY_USER = "seunome.bsky.social") 
#Sys.setenv(BLUESKY_PASS = "seu_app_password")
#Depois disso, funções como get_bluesky_user() podem acessar automaticamente esses dados sem você precisar informar manualmente toda vez.
```

```{r}

#| label: testando-grafico


# Buscar dados
rel <-
bs_get_relationships (
  actor = 'chriskenny.bsky.social',
  others = 'bskyr.bsky.social',
  auth = auth
)
  

#edges <- rel %>%
#  filter(following) %>%
#  transmute(from = actor, to = handle)

# Criar grafo
#g <- graph_from_data_frame(edges, directed = TRUE)

# Plot básico
#plot(g, vertex.label.color = "black", vertex.size = 30, edge.arrow.size = 0.5)

#ggraph(g, layout = "fr") +
#  geom_edge_link(arrow = arrow(length = unit(4, 'mm')), end_cap = circle(3, 'mm')) +
#  geom_node_point(size = 5, color = "steelblue") +
#  geom_node_text(aes(label = name), repel = TRUE) +
#  theme_void()
```




