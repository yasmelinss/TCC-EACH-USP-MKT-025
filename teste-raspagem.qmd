---
title: "Primeiro Teste de Raspagem no Bluesky"
author: "Thales de Fante Romão"
lang: pt-br
format: html
execute: 
  cache: false
---

# SETUP


```{r}
#| label: setup
#| eval: true
#| warning: false

library(bskyr)
library(tidyverse)
library(readr)
library(jsonlite)
```


## dados da autenticação do usuário para a raspagem

Usando o login do Thales
[Explicação do Bluesky sobre os app passwords](https://blueskyfeeds.com/faq-app-password)

```{r}
#| label: usuario-autenticação
#| eval: true
actor <- 'ennoe.bsky.social'

auth <- 
  bs_auth(
    user = "ennoe.bsky.social", 
    pass = "omp6-axyy-kme6-i4gm"
  )

print(auth)
```




# Documentando funções que extraem os dados do bluesky

## funções para raspar páginas do bluesky

```{r}
#| label: testando-search-posts
#| eval: true

posts <- 
  bs_search_posts(
    query = '"league of legends" since:2024-08-30 until:2024-10-08',
    limit = 2,
    auth = auth
  ) 
```

Jeito 1: mostra a raspagem

```{r}
posts
```

Jeito 2: mostra a estrutura

```{r}
str(posts)
```

Jeito 3: mostra a raspagem em JSON

```{r}
posts |> 
  toJSON(pretty = TRUE)
```



### Melhorando a visibilidade || buscando apenas campos específicos dessa raspagem

Tentativa de filtrar a raspagem para pegar apenas campos específicos

```{r}
#| label: filtrando-search-posts
#| eval: true

dados <- 
  posts |>
    transmute(
      id_do_post = uri,
      cid = cid,
      usuario = map_chr(author, "handle"),
      conteudo_post = map_chr(record, "text"),
      data = indexed_at
  )

dados
```

```{r}

dados |>
  toJSON(pretty = TRUE)
```



Segunda tentativa de filtragem, essa pega todos os campos específicados

```{r}
#| label: filtrando-search-posts-2
#| eval: true

dados2<- 
  map_dfr(1:nrow(posts), function(i){
    tibble(
      id_do_post = posts$uri[i],
      usuario = posts$author[[i]]$handle,
      conteudo_post = posts$record[[i]]$text,
      data = posts$record[[i]]$createdAt,
      curtidas = posts$like_count[i],
      reposts = posts$repost_count[i]
    )
  })

```

```{r}
dados2 |>
  toJSON(pretty = TRUE)

```

texto da documentação da biblioteca `{blskyr}` `(bs_x)` que deixei aqui para encontrar mais fácil `r 2+2`

```
Arguments
query Character vector, length 1. character. Search query, Lucene query syntax is
recommended.
sort character. Order or results. Either 'top' or 'latest'
since character. Filter results for posts on or after the indicated datetime or ISO date
(YYYY-MM-DD).
until character. Filter results for posts before the indicated datetime or ISO date
(YYYY-MM-DD).
mentions character. Filter to posts which mention the given account.
author character. Filter to posts by the given account.
lang character. Filter to posts in the given language.
domain character. Filter to posts with URLs (facet links or embeds) linking to the given
domain (hostname). Server may apply hostname normalization.
url character. Filter to posts with links (facet links or embeds) pointing to this URL.
Server may apply URL normalization or fuzzy matching.
tag character. Filter to posts with the given tag (hashtag), based on rich-text facet or
tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with
’AND’ matching.
cursor Character, length 1. A cursor property from a prior response. Default: NULL.
limit Integer. Number of records to request. If over 100, multiple requests are made.
user Character. User name to log in with. Defaults to get_bluesky_user().
pass Character. App password to log in with. Defaults to get_bluesky_pass().
auth Authentication information. Defaults to bs_auth(user, pass).
clean Logical. Should output be cleaned into a tibble? Default: TRUE.

```

## interpretando as variáveis que a raspagem traz


- `$uri` - código do post
- `$cid` - código do post
- `$author` - código do post
- `$handle` - nome do *user*
- `$displayName` - nome escolhido pelo usuário
- `$avatar` - foto de perfil
- `$associated` > `$chat` > `$allowIncoming` (chr "followers")
- `$activitySubscription` > `$allowSubscriptions` (chr "followers")
- `$muted` - mutado (false)
- `$blockedBy` - bloqueado (false)
- `$createdAt` - data de criação do usuário
- `$type` - app.bsky.feed.post
- `$createdAt` - data de criação do post
- `$embed` > `$type` > `$external` >` $description` - conteúdo do post
- `$title` - primeiras linhas do post se ele tiver um título
- `$uri` - um link colocado pelo usuário
- `$type`: chr "`app.bsky.richtext.facet#tag`" -  inicia a busca por #
- `$tag` - a # usada. ele também puxa os bytes da #
- `$type`: chr "`app.bsky.richtext.facet#link`" - inicia a busca pelo link colocado
- `$text` - conteúdo do post em si
- `$embed` > `$type`: chr "`app.bsky.embed.external#view`"> external > -  RESUMO DO POST com `$uri`, `$title`, `$description`, `$thumb`- display do link
- `$reply_count`- quantidade de comentários
- `$reposts_count`- quantidade de compartilhamento "repost"
- `$like_count`- quantidade de curtidas
- `$quote_count`- deve ser quantidade de menções
- `$indexed_at` data do post




## Documentando outras funções auxiliares

obter as informações de perfil de um ou mais usuários (atores) do Bluesky.

```{r}
#| label: testando-get-profile
#| eval: true

perfil<-
  bs_get_profile(
    'ennoe.bsky.social',
    auth = auth,
    clean = FALSE
  )
```

Mostra a estrutura

```{r}
str(perfil)
```

Mostra a estrutura em JSON

```{r}
perfil |> 
  toJSON(pretty = TRUE)
```

Filtro dos dados (não está filtrando)

```{r}

#dados <- perfil %>%
#  tibble(
#    did = perfil$did,
#    usuario = perfil$handle,
#    displayName = perfil$displayName,
#    data = perfil$indexed_at,
#    seguidores = perfil$followersCount,
#    seguindo = perfil$followsCount,
#    quant_posts = perfil$postsCount
#  )

#dados |>
#  toJSON(pretty = TRUE)

```

converte URI - URL

```{r}
#| label: testando-convert-uri-to-url-to-uri
#| eval: true

bs_uri_to_url('at://did:plc:ic6zqvuw5ulmfpjiwnhsr2ns/app.bsky.feed.post/3k7qmjev5lr2s')

bs_url_to_uri('https://bsky.app/profile/ennoe.bsky.social', auth = auth)

bs_uri_to_url('at://did:plc:kwssn4xujlrl4ybhzm5vt5mg/app.bsky.feed.post/3l5xjaj66js24')

bs_url_to_uri('https://bsky.app/profile/yasmelinss.bsky.social', auth = auth)

bs_url_to_uri('https://bsky.app/profile/chriskenny.bsky.social/post/3lc5d6zspys2c', auth = auth)
```
      
Pega apenas o valor do Record Key do usuário

```{r}
#| label: testando-extract-record-key
#| eval: false

key <-
  bs_extract_record_key('https://bsky.app/profile/chriskenny.bsky.social/post/3lc5d6zspys2c')

print(key)
```

retorna os perfis que seguem um determinado ator (usuário)

```{r}
#| label: testando-get-followers
#| eval: true

seguidores <-
  bs_get_followers(
    actor,
    cursor = NULL,
    limit = 1,
    auth = auth,
    clean = FALSE
  )  

cat("Jeito 1:\n")
print(seguidores)

cat("Jeito 2:\n")
str(seguidores)

cat("Jeito 3:\n")
perfil |> 
  toJSON(pretty = TRUE)
```

retorna os perfis que um determinado ator (usuário) segue

```{r}
#| label: testando-get-follows
#| eval: true

seguindo <-
  bs_get_follows(
    actor,
    cursor = NULL,
    limit = 1,
    auth = auth,
    clean = FALSE
  )    


cat("Jeito 1:\n")
print(seguindo)

cat("Jeito 2:\n")
str(seguindo)

cat("Jeito 3:\n")
seguindo |> 
  toJSON(pretty = TRUE)
```

recupera postagens curtidas por um ator

```{r}
#| label: testando-get-likes
#| eval: true


#não estou conseguindo trocar o ACTOR para o meu próprio
pegarcurtidas <- 
  bs_get_likes(
    actor = "ennoe.bsky.social",
    cursor = NULL,
    limit = 10,
    auth = auth,
    clean = FALSE
  )

cat("Jeito 1:\n")
print(pegarcurtidas)

cat("Jeito 2:\n")
str(pegarcurtidas)

cat("Jeito 3:\n")
pegarcurtidas |> 
  toJSON(pretty = TRUE)
```

A função bs_get_relationships() da biblioteca blskyr permite verificar os relacionamentos entre um usuário (ator) e outros usuários no Bluesky, como:

- Quem segue quem
- Quem foi bloqueado
- Quem foi silenciado

```{r}
#| label: testando-get-relationships
#| eval: true

relacoes <- 
  bs_get_relationships(
    actor = 'ennoe.bsky.social',
    others = c('bskyr.bsky.social', 'simko.bsky.social', 'yasmelins.bsky.social'),
    auth = auth,
    clean = FALSE
  )

cat("Jeito 1:\n")
print(relacoes)

cat("Jeito 2:\n")
str(relacoes)

cat("Jeito 3:\n")
relacoes |> 
  toJSON(pretty = TRUE)


```

Starter packs são listas públicas de contas sugeridas para seguir — normalmente usadas para ajudar novos usuários a encontrar contas interessantes, confiáveis ou relevantes com base em temas (como “jornalismo”, “arte”, “ciência”, etc.).

Starter packs no Bluesky são coleções curadas de perfis — um tipo de lista pública usada para recomendar pessoas a seguir.

Por exemplo, alguém pode criar um starter pack chamado "Estatísticos no R" contendo 15 perfis que falam sobre estatística e R.

```{r}
#|label: testanto-get-actor-starter-packs
#|eval: true

starterpacks <- 
  bs_get_actor_starter_packs(
    actor,       
    cursor = NULL, 
    limit = NULL,   
    auth = auth,
    clean = FALSE                 
  )

cat("Jeito 1:\n")
print(starterpacks)

cat("Jeito 2:\n")
str(starterpacks)

cat("Jeito 3:\n")
starterpacks |> 
  toJSON(pretty = TRUE)

```


No Bluesky, listas são coleções personalizadas de perfis, criadas para agrupar e organizar pessoas que você segue ou outras contas.

Quando usar?

- Para consultar e analisar o conteúdo de listas específicas no Bluesky
- Para mostrar a composição de uma lista em dashboards ou relatórios
- Para gerenciar listas e seus membros via programação


```{r}
#| label: testando-get-list
#| eval: true

gerandolista <-
  bs_get_list(
    list = 'at://did:plc:ragtjsm2j2vknwkz3zp4oxrd/app.bsky.graph.list/3kmokjyuflk2g',        
    cursor = NULL,  
    limit = 1,  
    auth = auth,
    clean = FALSE
  )

cat("Jeito 1:\n")
print(gerandolista)

cat("Jeito 2:\n")
str(gerandolista)

cat("Jeito 3:\n")
gerandolista |> 
  toJSON(pretty = TRUE)


```

bs_search_actors() permite procurar perfis no Bluesky com base em uma consulta textual, retornando uma lista de contas que combinam com a busca. 

```{r}
#| label: testando-search-actors
#| eval: true

procurandoperfis <- 
  bs_search_actors(
    'league of legend', #query == texto da busca
    typeahead = FALSE, #se TRUE, faz uma busca tipo "sugestão enquanto digita" (autocomplete). Padrão: FALSE.
    cursor = NULL, #paginação a parti de uma resposta anterior
    limit = 2,
    auth = auth,
    clean = FALSE
)

cat("Jeito 1:\n")
print(procurandoperfis)

cat("Jeito 2:\n")
str(procurandoperfis)

cat("Jeito 3:\n")
procurandoperfis |> 
  toJSON(pretty = TRUE)

```




## Outras funções que não serão usadas

(Apenas salvando)



O que é um “registro” (record)?

Na arquitetura descentralizada do AT Protocol, tudo publicado é um registro em um repositório pessoal. Por exemplo:

Posts → coleção app.bsky.feed.post

Likes → coleção app.bsky.feed.like

Reposts → coleção app.bsky.feed.repost

Listas → coleção app.bsky.graph.list

Você precisa saber os 3 elementos: repo, collection, e rkey.

bs_get_record(
  repo = "bskyr.bsky.social",
  collection = "app.bsky.feed.post",
  rkey = "3kf2577exva2x"
)
Obs: Esse exemplo está "disfarçado" no formato de URL no manual:
https://bsky.app/profile/bskyr.bsky.social/post/3kf2577exva2x

A estrutura é:
repo = bskyr.bsky.social
collection = app.bsky.feed.post
rkey = 3kf2577exva2x

Essa função é mais baixa nível que bs_get_posts() (que já lida com essas partes para você).


```{r}
#| label: testando-get-record 
#| eval: false

bs_get_record('https://bsky.app/profile/bskyr.bsky.social/post/3kf2577exva2x',
)
```

Exporta XLXS

```{r}
#| label: nao-exportando-xlsx
#| eval: false

#Salvar um data frame chamado posts em um arquivo Excel chamado teste_raspagem_urls.xlsx, usando a função write_xlsx().
write_xlsx(posts, path = "teste_raspagem_urls.xlsx")
```

busca um ou mais posts diretamente pela URL ou URI interna, e retorna seus conteúdos como uma tabela

- pega posts de um usuário específico

```{r}
#| label: nao-testando-get-posts
#| eval: false

bs_get_posts(
  'https://bsky.app/profile/chriskenny.bsky.social/post/3lc5d6zspys2c',
  auth = auth,
  clean = FALSE
)


  
```

Obter uma lista de perfis (atores) sugeridos para você seguir no Bluesky, com base nas recomendações do sistema da plataforma.

```{r}
#|label: nao-testando-get-actor-suggest
#|eval: false

atorsugestao <-
  bs_get_actor_suggestions(
    cursor = NULL,
    limit = 10,    # Quantidade de sugestões (acima de 100 = múltiplas requisições)
    auth = auth,  # Objeto de autenticação
    clean = FALSE
  )

atorsugestao |> 
  toJSON(pretty = TRUE)

```

Busca os posts de um feed personalizado, com base em um feed generator criado no Bluesky
- Para consumir feeds temáticos curados por terceiros
- Para análises sociais ou de conteúdo
- construir dashboards com categorias de conteúdo personalizadas

Acho que essa função é mais para a criação de BOTS

```{r}
#| label: nao-testando-feed-generator
#| eval: false

listafeedsdisponiveis <- 
  bs_get_feeds(
  actor, 
  cursor = NULL,
  limit = NULL,
  auth = auth,
  clean = FALSE
)

print(listafeedsdisponiveis)

retornapostmaisrecente <- 
  bs_get_feed(
  feed = 'https://bsky.app/profile/chriskenny.bsky.social/post/3lc5d6zspys2c',          # URI do feed generator
  cursor = NULL, #Para paginação (caso tenha muitos posts)
  limit = 1,  #Número máximo de posts (padrão depende do servidor; se > 100, faz múltiplas chamadas)
  auth = auth,
  clean = FALSE
)

print(retornapostmaisrecente)
```

Essa função cria um "registro" no Bluesky, que pode ser:

um post (app.bsky.feed.post)

um like (app.bsky.feed.like)

uma repostagem (app.bsky.feed.repost)

um item de lista (app.bsky.graph.listitem)

etc.

```{r}
#| label: nao-testando-create-record
#| eval: false

bs_create_record(
  collection,
  record,
  auth = auth,
  clean = FALSE
)

#Dando like em um post
# 1. Obter os dados de um post existente (pego pela URL do Bluesky)
post_rcd <- bs_get_record('https://bsky.app/profile/bskyr.bsky.social/post/3kf2577exva2x')

# 2. Montar o objeto de like
like <- list(
  subject = list(
    uri = post_rcd$uri,  # identificador do post
    cid = post_rcd$cid   # content ID (hash do conteúdo)
  ),
  createdAt = bs_created_at()  # timestamp atual no formato correto
)

# 3. Criar o registro de like no seu perfil
bs_create_record(
  collection = 'app.bsky.feed.like',  # tipo de registro
  record = like                       # conteúdo
)

#Exemplo para criar um POST
new_post <- list(
  text = "Este é um post criado via R usando o pacote {bskyr}!",
  createdAt = bs_created_at()
)

bs_create_record(
  collection = "app.bsky.feed.post",
  record = new_post
)
```

Faz um post no Bluesky

```{r}
#| label: nao-testando-post
#| eval: false

# bs_post Make a post on Bluesky Social

#bs_post(
#text,
#images,
#images_alt,
#video,
#video_alt,
#langs,
#reply,
#quote,
#embed = TRUE,
#emoji = TRUE,
#max_tries,
#created_at = bs_created_at(),
#user = get_bluesky_user(),
#pass = get_bluesky_pass(),
#auth = bs_auth(user, pass),
#clean = TRUE
#)
```

Retorna todas as listas públicas associadas a um determinado usuário (ator) do Bluesky

```{r}
#| label: nao-testando-actor-lists
#| eval: true

puxarlista <- 
  bs_get_actor_lists(
    'ennoe.bsky.social',# Ex: 'usuario.bsky.social' ou 'did:plc:...'
    cursor = NULL,  # Para paginação de resultados
    limit = NULL,   # Número de listas a buscar (padrão: todas disponíveis)
    auth = auth,  # Objeto de autenticação
    clean = FALSE # Retorna um tibble limpo
  )

puxarlista |> 
  toJSON(pretty = TRUE)

```

Um conjunto de perfis (DIDs ou handles) agrupados por um usuário.

Armazenada como um registro no repositório pessoal do usuário, no namespace `app.bsky.graph.list`.

```{r}
#| label: nao-testando-get-actor-lists
#| eval: false

lista_ator <- 
  bs_get_actor_lists(
    actor = 'chriskenny.bsky.social',
    cursor = NULL,
    limit = NULL,
    auth = auth,
    clean = FALSE
  )

print(lista_ator)

```

retorna as sugestões de perfis para determinado usuário seguir 

```{r}
#| label: nao-testando-follows-suggestions
#| eval: true

follows_suggestions <- 
  bs_get_follow_suggestions(
    actor,
    auth = auth
  )

print(follows_suggestions)
```

```{r}
#| label: nao-testando-get-repost
#| eval: false
# resposta um post
```

```{r}
#| label: nao-testando-get-timeline
#| eval: false
# retorna os posts mais recentes das contas que o usuário segue, da mesma forma que aparecem no app do Bluesky.
```

```{r}
#| label: nao-testando-new-embed-external
#| eval: false
# cria um "preview" de um link externo (com título, descrição e thumbnail), para ser incluído dentro de um post via bs_post().
```

```{r}
#| label: nao-testando-new-list
#| eval: false
# bs_new_list() cria uma lista personalizada que pode servir para moderar, curar conteúdos ou como referência, com nome, propósito, descrição e avatar.
#pode ser útil AINDA

```


```{r}
#| label: nao-testando-resolve-handle
#| eval: false

#bs_resolve_handle() pega um handle do Bluesky e retorna o DID correspondente, que é um identificador único global usado para identificar contas de forma descentralizada.

```

```{r}
#| label: nao-testando-has-bluesky-user
#| eval: false

#As funções has_bluesky_user() e get_bluesky_user() da biblioteca blskyr são utilitários para verificar e obter o nome de usuário (handle) usado para se autenticar no Bluesky, geralmente de forma automatizada (como via variável de ambiente ou configuração interna).

#Essas funções geralmente pegam o valor de uma variável de ambiente configurada previamente, como:
#Sys.setenv(BLUESKY_USER = "seunome.bsky.social") 
#Sys.setenv(BLUESKY_PASS = "seu_app_password")
#Depois disso, funções como get_bluesky_user() podem acessar automaticamente esses dados sem você precisar informar manualmente toda vez.
```

```{r}
#| label: nao-testando-grafico


# Buscar dados
rel <-
bs_get_relationships (
  actor = 'chriskenny.bsky.social',
  others = 'bskyr.bsky.social',
  auth = auth
)
  

#edges <- rel %>%
#  filter(following) %>%
#  transmute(from = actor, to = handle)

# Criar grafo
#g <- graph_from_data_frame(edges, directed = TRUE)

# Plot básico
#plot(g, vertex.label.color = "black", vertex.size = 30, edge.arrow.size = 0.5)

#ggraph(g, layout = "fr") +
#  geom_edge_link(arrow = arrow(length = unit(4, 'mm')), end_cap = circle(3, 'mm')) +
#  geom_node_point(size = 5, color = "steelblue") +
#  geom_node_text(aes(label = name), repel = TRUE) +
#  theme_void()
```


```{r}
#| label: nao-exemplo-sub-dataframe
#| eval: false
posts |>
  select(uri, cid, author) |> 
  filter(author == "zé das couves") |> 
  summarize()
```







# Puxando um perfil específico


```{r}
#| label: puxando dados de um usuário pelo @
#| eval: true

bs_get_profile(
  'yasmelins.bsky.social',
  auth = auth,
  clean = FALSE
)
```

```{r}
#perfil2<- 
#  map_dfr(1:nrow(perfil2), function(i){
#    tibble(
#      id_do_perfil = perfil2$did,
#      usuario = posts$author[[i]]$handle,
#      conteudo_post = posts$record[[i]]$text,
#      data = posts$record[[i]]$createdAt,
#      curtidas = posts$like_count[i],
#      reposts = posts$repost_count[i]
#    )
#  })
```

```{r}

#perfil2 %>%
#    transmute(
#      id_do_post = profile$did,
#      usuario = author$handle,
#      conteudo_post = record$text,
#      data = indexed_at
#   )
```

Mas o final app.bsky.feed.NA/NA é inválido → significa que não aponta para um post, e sim veio “quebrado” (talvez de um repost, like ou campo incompleto).


```{r}
#| label: puxando um usuário pela url

bs_url_to_uri('https://bsky.app/profile/yasmelins.bsky.social', auth = auth)


#puxando um post pela url 
bs_url_to_uri('https://bsky.app/profile/yasmelins.bsky.social/post/3l6br5zrsda2r', auth = auth)

```


Consigo puxar um post de um usuário específico com uma  URI, mas não o feed de um usuário


```{r}
#| label: puxando um usuário pela uri

bs_uri_to_url('at://did:plc:vljand5f4megiw7rj4mpmhaw/app.bsky.feed.NA/NA')

#puxando um post pela uri
bs_uri_to_url('at://did:plc:vljand5f4megiw7rj4mpmhaw/app.bsky.feed.post/3l6br5zrsda2r')
```

```{r}
#| label: descobrindo usuário pelo did


#pegando só a parte certa da URI
did <- str_extract('at://did:plc:vljand5f4megiw7rj4mpmhaw/app.bsky.feed.NA/NA', "did:[^/]+")

print(did)
```


```{r}
#| label: extraindo informações do perfil pelo did ou @

#buscando o perfil pelo did (bs_get_profile também funciona com o @ do perfil)
perfil <- 
  bs_get_profile(
    did, 
    auth = auth, 
    clean = FALSE
  )

print(perfil)
```

Se for vários perfis, aí sim precisa de map_dfr() → mas percorrendo a lista de perfis, não nrow(perfil).

`$did` -> did
`$handle` -> @ do perfil
`$displayName` -> nome informal que o perfil escolheu
`$description` -> bio ou descrição do perfil
`$followersCount` -> quantidade de seguidores
`$followsCount` -> quantidade de pessoas que segue
`$postCount` -> quantidade de posts feitos
`$created_At` -> data de criação

`$profiles[[1]]$viewer$following`
[1] "at://did:plc:4bvoxokewgsqfjfefnzsppny/app.bsky.graph.follow/3lqazs263lf2w"

following → significa que você está seguindo esse perfil. (visão do viwer ou auth)

did:plc:4bvoxokewgsqfjfefnzsppny → é o DID (identificador descentralizado) do seu usuário (a conta autenticada).

app.bsky.graph.follow → tipo de registro: uma relação de "seguir".

3lqazs263lf2w → ID específico do registro (essa ação de seguir).

Esse campo quer dizer: “O usuário autenticado (DID 4bvoxokewgsqfjfefnzsppny) está seguindo o perfil que você acabou de buscar.”


`$viewer$knownFollowers` -> informações sobre os seguidores em comum

`$viewer$knownFollowers$count` -> conta seguidores em comum com o auth



```{r}
#| label: filtrando as informações de 1 perfil

handle <- perfil$profiles[[1]]$handle

filtragem <- 
    tibble(
      
      nome_perfil = perfil$profiles[[1]]$displayName,
      bio = perfil$profiles[[1]]$description,
      seguidores = perfil$profiles[[1]]$followersCount,
      seguindo = perfil$profiles[[1]]$followsCount,
      posts = perfil$profiles[[1]]$postsCount,
      criado_em = perfil$profiles[[1]]$createdAt,
      url_perfil = paste0("https://bsky.app/profile/", handle),
      seguidores_em_comum = perfil$profiles[[1]]$viewer$knownFollowers,
    )

print(filtragem)
```



# TESTES Tentando puxar uma postagem específica


![postagem do @exojuego.bsky.social](Imagens/postlol1.png)

```{r}
#| label: puxando postagem exojuego

dados_filtrados <- posts %>%
  transmute(
    id_do_post = uri,
    usuario = author$handle,
    conteudo_post = record$text,
    data = indexed_at
  )

print(dados_filtrados)
```



```{r}
#| label: puxando um post pela url

#puxando um post pela url 
bs_url_to_uri('https://bsky.app/profile/yasmelins.bsky.social/post/3l3qzvznx2k2d', auth = auth)

#puxando um post pela uri 
bs_uri_to_url('at://did:plc:vljand5f4megiw7rj4mpmhaw/app.bsky.feed.post/3la4uxpqm6u2t')

#puxando um post pelo did
str_extract('at://did:plc:vljand5f4megiw7rj4mpmhaw/app.bsky.feed.NA/NA', "did:[^/]+")

```


Puxar os posts do usuário com bs_search_posts() ou bs_get_profile_posts()

Pegar o URI de cada post

Passar o URI do post para bs_get_likes()


`$uri` -> uri
`$cid` -> permite referenciar o post ou arquivo de forma única sem depender de URL
`$did` -> did
`$handle` -> @
`$displayName` -> nome escolhido pelo usuário
`$text` -> conteúdo do post
`$following` -> Contém o URI do registro de “seguir” do usuário autenticado em relação a este perfil. Se houver valor ("at://...") → o usuário autenticado segue o perfil. Se NULL → o usuário não segue o perfil.

```{r}
#| label: puxando o(s) último(s) post(s)

post <- 
  bs_search_posts(
    query = paste0('from:', 'yasmelins.bsky.social'),
    limit = 1,
    auth = auth
  )
str(post)

```


Essa função não pega as curtidas que o usuário fez — ela pega as curtidas em um post específico.

Se você quer as curtidas feitas por um usuário, essa API ainda não é exposta diretamente (nem no bskyr, nem no Bluesky oficial).
A alternativa seria:

pegar os posts do usuário com bs_search_posts(author = "handle"),

depois rodar bs_get_likes() para cada post dele e ver os usuários que curtiram.


```{r}
#| label: tentando pegar curtida de 1 post

bs_get_likes(
    actor = 'ennoe.bsky.social',
    user = 'yasmelins.bsky.social',
    cursor = NULL,
    limit = 20,
    auth = auth,
    clean = FALSE
  )
```



```{r}
#| label: tentando pegar quais usuários curtiram os posts de 1

posts <- bs_search_posts(
  query = paste0('from:', 'yasmelins.bsky.social'),  # busca posts do usuário
  limit = 10,                        # quantos posts puxar
  auth = auth
)

# Extrair os URIs dos posts
post_uris <- map_chr(posts$posts, ~ .x$uri)  # cada post tem $uri

# --- 2. Para cada post, puxar os likes ---
likes_por_post <- map_dfr(post_uris, function(uri_post) {
  
  likes <- bs_get_likes(uri_post, limit = 10, auth = auth, clean = FALSE)
  
  # Extrair dados principais de quem curtiu
  if(length(likes$likes) > 0){
    map_dfr(likes$likes, function(l) {
      tibble(
        post_uri = uri_post,
        usuario_curtiu = l$actor$handle,
        nome_curtiu = l$actor$displayName,
        avatar_curtiu = l$actor$avatar,
        created_at = l$createdAt
      )
    })
  } else {
    # Nenhum like
    tibble(
      post_uri = uri_post,
      usuario_curtiu = NA,
      nome_curtiu = NA,
      avatar_curtiu = NA,
      created_at = NA
    )
  }
})

# --- 3. Visualizar resultado ---
likes_por_post
```

```{r}
#| label: teste2

posts_usuario <- 
  bs_search_posts(
      query = NULL,                        # vazio = não filtrar por texto
      author = "did:plc:vljand5f4megiw7rj4mpmhaw",  # handle do usuário
      sort = "latest",                   # posts mais recentes
      limit = 10,                        # quantos posts puxar
      auth = auth,
      clean = TRUE
    )

```

```{r}

likes_por_post <- 
  purrr::map_dfr(
    posts_usuario$uri, function(uri_post){
      bs_get_likes(
        uri_post, 
        limit = 10, 
        auth = auth, 
        clean = TRUE)
    }
  )
```


# Apenas anotações, por favor, ignorar

- como puxar 1 usuário específico pela url
- como puxar 1 usuário específico pela uri
- como puxar 1 usuário aleatório
- como puxar 1 usuário de um post LOL
- como puxar 1 post LOL
- como puxar os perfis que deram likes de um post
- como puxar os perfis que deram reply em um post
- como puxar os perfis que comentaram um post
- como puxar os comentários de um post

listar outras coisas

📌 Dica: sempre que você ver no str() algo como

$ author: List of 2
 ..$ :List of 8
 .. ..$ handle: chr "algumacoisa"


significa que precisa de map_* (map_chr, map_dbl, map_lgl) para extrair o campo desejado.

https://bsky.app/profile/yasmelins.bsky.social











### MODELO API OFICIAL

teste 1

```{r}
#| label: seguidores-comuns
#| include: true

# Função auxiliar para pegar seguidores via API oficial Bluesky
get_followers <- function(handle, limit = 10) {
  base_url <- "https://bsky.social/xrpc/app.bsky.graph.getFollowers"
  cursor <- NULL
  all_followers <- list()

  repeat {
    req <- request(base_url) |>
      req_url_query(actor = handle, limit = 10, cursor = cursor)

    resp <- req_perform(req)
    data <- resp_body_json(resp)

    # Adiciona seguidores retornados
    all_followers <- c(all_followers, data$followers)

    # Controle de paginação
    if (is.null(data$cursor) || length(all_followers) >= limit) break
    cursor <- data$cursor
  }

  # Converte para tibble
  tibble(
    did = sapply(all_followers, function(x) x$did),
    handle = sapply(all_followers, function(x) x$handle),
    displayName = sapply(all_followers, function(x) x$displayName)
  )
}

# ---- Exemplo de uso ----
usuario1 <- "ennoe.bsky.social"
usuario2 <- "yasmelins.bsky.social"

seguidores1 <- get_followers(usuario1)
seguidores2 <- get_followers(usuario2)

# Interseção dos seguidores (pelo DID)
seguidores_comuns <- inner_join(seguidores1, seguidores2, by = "did", suffix = c("_u1", "_u2"))

# Resultado
seguidores_comuns |>
  select(did, handle_u1, displayName_u1)

```

