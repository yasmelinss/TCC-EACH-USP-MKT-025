---
title: "Primeiro Teste de Raspagem no Bluesky"
author: "Thales de Fante Romão"
lang: pt-br
format: html
---

```{r}
#| label: setup
#| warning: false

library(bskyr)
library(tidyverse)
library(readr)
```

## dados da autenticação do usuário para a raspagem

Usando o login do Thales

```{r}
#| label: usuário-autenticação

auth <- 
  bs_auth(
    user = "ennoe.bsky.social", 
    pass = "omp6-axyy-kme6-i4gm"
  )
```

[Explicação do Bluesky sobre os app passwords](https://blueskyfeeds.com/faq-app-password)

## raspando páginas à procura da string `"league of legends"`

Raspagem de teste

```{r}
posts <- 
  bs_search_posts(
    query = '"league of legends" since:2024-08-30 until:2024-10-08',
    limit = 10,
    auth = auth,
    
  )
print(posts)
####  AQUI: descobrir como fazer isso ----
# posts2 <- 
#   bs_search_posts(
#     query = '"league of legends"', 
#     since = "2024-08-30", 
#     until = "2024-10-08",
#     limit = 10,
#     auth = auth
#   )
# print(posts2)
```


[Página de documentação do bluesky](https://bsky.social/about/blog/05-31-2024-search)
com mais campos (keywords) que podem ser usadas nas queries


## descobrindo as informações que a raspagem traz

```{r}
#| label: olhando-estrutura
#|output

str(posts[1, ])
```


```{r}
#| label: exportando-xlsx
#| eval: false

#Salvar um data frame chamado posts em um arquivo Excel chamado teste_raspagem_urls.xlsx, usando a função write_xlsx().
write_xlsx(posts, path = "teste_raspagem_urls.xlsx")
```


```{r}

#| label: transformando-em-URLs
#acessa a coluna uri do dataframe posts
uris <- posts$uri  
print(uris)

convert_uri_to_url <- function(uri) {
   # Remove 'at://'
   clean <- sub("^at://", "", uri)
   # Divide em partes pelo último '/'
   parts <- strsplit(clean, "/")[[1]]
   did <- parts[1]
   post_id <- parts[length(parts)]
   paste0("https://bsky.app/profile/", did, "/post/", post_id)
 }

# Exemplo:
uris <- c("at://did:plc:kwssn4xujlrl4ybhzm5vt5mg/app.bsky.feed.post/3l5xjaj66js24")
urls <- sapply(uris, convert_uri_to_url)
print(urls)

```




```{r}
#| label: exemplo-sub-dataframe
#| eval: false
posts |>
  select(uri, cid, author) |> 
  filter(author == "zé das couves") |> 
  summarize()
```

```{r}
#| label: testando-sugestões-seguidores
#| eval: false
follows_suggestions <- bs_get_follow_suggestions(
  actor,
  user = user,
  pass = pass,
  auth = auth,

)

print(follows_suggestions)

```
```{r}
#| label: testando-lista-autor
#| eval: false
  lista_ator <- bs_get_actor_lists(
  actor = 'chriskenny.bsky.social',
  cursor = NULL,
  limit = NULL,
  user = user,
  pass = pass,
  auth = auth,
  clean = TRUE
)

print(lista_ator)

```

```{r}
#| label: testando-record-key
#| eval: false
key <- bs_extract_record_key('https://bsky.app/profile/chriskenny.bsky.social/post/3lc5d6zspys2c')

print(key)
```

