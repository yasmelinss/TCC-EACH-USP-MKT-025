---
title: "Primeiro Teste de Raspagem no Bluesky"
author: "Thales de Fante Romão"
lang: pt-br
format: html
---

```{r}
#| label: setup
#| warning: false

library(bskyr)
library(tidyverse)
library(readr)
```

## dados da autenticação do usuário para a raspagem

Usando o login do Thales

```{r}
#| label: usuário-autenticação

actor <- 'ennoe.bsky.social'

auth <- 
  bs_auth(
    user = "ennoe.bsky.social", 
    pass = "omp6-axyy-kme6-i4gm"
  )
```

[Explicação do Bluesky sobre os app passwords](https://blueskyfeeds.com/faq-app-password)

## raspando páginas à procura da string `"league of legends"`

Raspagem de teste

```{r}

#| label: extração de posts por palavra-chave
posts <- 
  bs_search_posts(
    query = '"league of legends" since:2024-08-30 until:2024-10-08',
    limit = 10,
    auth = auth,
    )

print(posts)
####  AQUI: descobrir como fazer isso ----
# posts2 <- 
#   bs_search_posts(
#     query = '"league of legends"', 
#     since = "2024-08-30", 
#     until = "2024-10-08",
#     limit = 10,
#     auth = auth
#   )
# print(posts2)
```


[Página de documentação do bluesky](https://bsky.social/about/blog/05-31-2024-search)
com mais campos (keywords) que podem ser usadas nas queries


## descobrindo as informações que a raspagem traz

<!-- Não sei de a formatação está correta -->


- $uri - código do post
- $cid - código do post
- $author - código do post
- $handle - nome do *user*
- $displayName - nome escolhido pelo usuário
- $avatar - foto de perfil
  $associated > $chat > $allowIncoming (chr "followers")
  $activitySubscription > > $allowSubscriptions (chr "followers")
- $muted - mutado (false)
- $blockedBy - bloqueado (false)
- $createdAt - data de criação do usuário
- $type - app.bsky.feed.post
- $createdAt - data de criação do post
- > $embed > $type > $external> $description - conteúdo do post
- $title - primeiras linhas do post se ele tiver um título
- $uri - um link colocado pelo usuário
- $type: chr "app.bsky.richtext.facet#tag" -  inicia a busca por #
- $tag - a # usada. ele também puxa os bytes da #
- $type: chr "app.bsky.richtext.facet#link" - inicia a busca pelo link colocado
- $text - conteúdo do post em si
- > $embed > $ > $type   : chr "app.bsky.embed.external#view"> external > -  RESUMO DO POST com $uri, $title, $description, $thumb - display do link
- $reply_count - quantidade de comentários
- $reposts_count - quantidade de compartilhamento "repost"
- $like_count - quantidade de curtidas
- $quote_count - deve ser quantidade de menções
- $indexed_at - data do post


```{r}
#| label: exportando-xlsx
#| eval: false

#Salvar um data frame chamado posts em um arquivo Excel chamado teste_raspagem_urls.xlsx, usando a função write_xlsx().
write_xlsx(posts, path = "teste_raspagem_urls.xlsx")
```


```{r}

#| label: transformando-em-URLs
#| eval: false
#acessa a coluna uri do dataframe posts
uris <- posts$uri  
print(uris)

convert_uri_to_url <- function(uri) {
   # Remove 'at://'
   clean <- sub("^at://", "", uri)
   # Divide em partes pelo último '/'
   parts <- strsplit(clean, "/")[[1]]
   did <- parts[1]
   post_id <- parts[length(parts)]
   paste0("https://bsky.app/profile/", did, "/post/", post_id)
 }

# Exemplo:
uris <- c("at://did:plc:kwssn4xujlrl4ybhzm5vt5mg/app.bsky.feed.post/3l5xjaj66js24")
urls <- sapply(uris, convert_uri_to_url)
print(urls)

```

```{r}
#| label: exemplo-sub-dataframe
#| eval: false
posts |>
  select(uri, cid, author) |> 
  filter(author == "zé das couves") |> 
  summarize()
```

```{r}
#| label: testando-sugestões-seguidores
#| eval: true
follows_suggestions <- bs_get_follow_suggestions(
  actor,
  user = user,
  pass = pass,
  auth = auth,

)

print(follows_suggestions)

```

```{r}
#| label: testando-lista-autor
#| eval: false
  lista_ator <- 
    bs_get_actor_lists(
    actor = 'chriskenny.bsky.social',
    cursor = NULL,
    limit = NULL,
    user = user,
    pass = pass,
    auth = auth,
    clean = TRUE
  )

print(lista_ator)

```

```{r}

#| label: testando-create-record
#| eval: false

# Ela envia um novo registro (como um post, like, repost, etc.) para o servidor da Bluesky, dentro de uma coleção específica (como app.bsky.feed.post ou app.bsky.feed.like)

bs_create_record(
  
collection,
record,
user = user,
pass = pass,
auth = auth,
clean = TRUE
)
```

```{r}
#| label: testando-extract-record-key
#| eval: false
key <-
  bs_extract_record_key(
    'https://bsky.app/profile/chriskenny.bsky.social/post/3lc5d6zspys2c'
    )

print(key)
```

```{r}
#| label: testando-puxar-listas
#| eval: true
# Retorna todas as listas públicas associadas a um determinado usuário (ator) do Bluesky

puxarlista <- 
  bs_get_actor_lists(
  'ennoe.bsky.social',# Ex: 'usuario.bsky.social' ou 'did:plc:...'
  cursor = NULL,  # Para paginação de resultados
  limit = NULL,   # Número de listas a buscar (padrão: todas disponíveis)
  auth = auth,  # Objeto de autenticação
  clean = FALSE # Retorna um tibble limpo
)

print(puxarlista)
  
```

```{r}
#|label: testanto-actor-starter-packs
#|eval: true
# Starter packs são listas públicas de contas sugeridas para seguir — normalmente usadas para ajudar novos usuários a encontrar contas interessantes, confiáveis ou relevantes com base em temas (como “jornalismo”, “arte”, “ciência”, etc.).

bs_get_actor_starter_packs(
  actor,       
  cursor = NULL, 
  limit = NULL,   
  auth = auth,
  clean = FALSE                 
)

```
```{r}
#|label: testando-get-actor-suggest
#|eval: true

# obter uma lista de perfis (atores) sugeridos para você seguir no Bluesky, com base nas recomendações do sistema da plataforma.

atorsugestao <-
  bs_get_actor_suggestions(
  cursor = NULL,
  limit = 10,    # Quantidade de sugestões (acima de 100 = múltiplas requisições)
  auth = auth,  # Objeto de autenticação
  clean = FALSE
  )
print (atorsugestao)
```

O resultado desse chunk me intriga... Ele puxa campos como
- $did
- $handle: nome do usuário
- $displayName: nome escolhido pelo usuário
- $description: descrição ou bio do usuário
- $avatar: foto de perfil

```{r}
#| label: testando-feed-generator
#| eval: false

# Busca os posts de um feed personalizado, com base em um feed generator criado no Bluesky
#Para consumir feeds temáticos curados por terceiros
#Para análises sociais ou de conteúdo
# construir dashboards com categorias de conteúdo personalizadas

listafeedsdisponiveis <- 
  bs_get_feeds(
  actor, 
  cursor = NULL,
  limit = NULL,
  auth = auth,
  clean = FALSE
)

print(listafeedsdisponiveis)

retornapostmaisrecente <- 
  bs_get_feed(
  'https://bsky.app/profile/chriskenny.bsky.social/post/3lc5d6zspys2c',          # URI do feed generator
  cursor = NULL, #Para paginação (caso tenha muitos posts)
  limit = 1,  #Número máximo de posts (padrão depende do servidor; se > 100, faz múltiplas chamadas)
  auth = auth,
  clean = FALSE
)

print(retornapostmaisrecente)

```

