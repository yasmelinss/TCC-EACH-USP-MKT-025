---
title: "Primeiro Teste de Raspagem no Bluesky"
author: "Thales de Fante Romão"
lang: pt-br
format: html
execute: 
  cache: false
---

# SETUP

Para a inicialização da raspagem, carrega-se as bibliotecas a seguir. 

- {`bksky`}: Pacote para interagir com a API do *Bluesky*
-{`tidyverse`}: Conjunto de pacotes para a manipulação e visualização de dados
-{`readr`}: Pacote para ler e escrever arquivos de texto/tabulares
-{`jsonlite`}: Pacote para tabular dados em formato JSON
-{`httr2`}: Pacote para fazer requisições http

```{r}
#| label: setup
#| eval: true
#| warning: false

library(bskyr)
library(tidyverse)
library(readr)
library(jsonlite)
library(httr2)
```


## dados da autenticação do usuário para a raspagem

Usando o login do Thales

```{r}
#| label: usuario-autenticação


#actor <- 'ennoe.bsky.social'

auth <- 
  bs_auth(
    user = "ennoe.bsky.social", 
    pass = "omp6-axyy-kme6-i4gm"
  )
```

# CONVERSÃO

transformando URI em URL e vice-versa

```{r}
#| label: uri-to-url-to-uri
#| eval: false

bs_uri_to_url('at://did:plc:ic6zqvuw5ulmfpjiwnhsr2ns/app.bsky.feed.post/3k7qmjev5lr2s')

bs_uri_to_url('at://did:plc:kwssn4xujlrl4ybhzm5vt5mg/app.bsky.feed.post/3l5xjaj66js24')

bs_url_to_uri('https://bsky.app/profile/ennoe.bsky.social', auth = auth)

bs_url_to_uri('https://bsky.app/profile/yasmelinss.bsky.social', auth = auth)
```

Pega apenas o valor do Record Key do usuário

```{r}

#| label: extract-record-key
#| eval: true

bs_extract_record_key('at://did:plc:kwssn4xujlrl4ybhzm5vt5mg/app.bsky.feed.post/3l5xjaj66js24')
```

# EXTRAÇÃO DOS DADOS

## USUÁRIO

puxando um usuário pela url

```{r}
#| label: user-url-to-uri

bs_url_to_uri('https://bsky.app/profile/yasmelins.bsky.social', auth = auth)
```

Durante a análise, verificou-se que URIs ou URLs que apresentam os valores (`NA/NA`) não permitem a recuperação do usuário, uma vez que tais entradas não são interpretadas corretamente pelo sistema. Por outro lado, quando a função é aplicada a um post que contém valores válidos, a conversão ocorre de maneira adequada.

```{r}
#| label: user-uri-to-url

bs_uri_to_url('at://did:plc:vljand5f4megiw7rj4mpmhaw/app.bsky.feed.NA/NA')
```

Obtendo did da URI

Para extrair apenas o `$did` de uma `URI` é necessário aplicar a função (`str_extract`).

```{r}
#| label: extrai-did-user

did <- str_extract('at://did:plc:vljand5f4megiw7rj4mpmhaw/app.bsky.feed.post/3l6br5zrsda2r', "did:[^/]+")

print(did)
```

#PERFIL

puxando dados de um perfil pelo @ ou did

-`$did` -> did
-`$handle` -> @ do perfil
-`$displayName` -> nome informal que o perfil escolheu
-`$description` -> bio ou descrição do perfil
-`$followersCount` -> quantidade de seguidores
-`$followsCount` -> quantidade de pessoas que segue
-`$postCount` -> quantidade de posts feitos
-`$created_At` -> data de criação
-`$profiles[[1]]$viewer$following`
[1] "at://did:plc:4bvoxokewgsqfjfefnzsppny/app.bsky.graph.follow/3lqazs263lf2w"

app.bsky.graph.follow → tipo de registro: uma relação de "seguir".

-`$viewer$knownFollowers` -> informações sobre os seguidores em comum
-`$viewer$knownFollowers$count` -> conta seguidores em comum com o auth
-`$viewer$knownFollowers$did` -> did do seguidor em comum
-`$viewer$knownFollowers$handle` -> @ do perfil do seguidor em comum
-`$viewer$knownFollowers$displayName` -> Nome informal do seguidor em comum

Extrai o perfil com a `did` específicada e seus seguidores

```{r}
#| label: get-profile
#| eval: true

perfil<-
  bs_get_profile(
    did,
    auth = auth,
    clean = FALSE
  )
```


Filtra informações do perfil principal `did`, com enfase na `knownFollowers`

```{r}
#| label: filtrando-informação-1-perfil

handle <- perfil$profiles[[1]]$handle

filtragem <- 
    tibble(
      nome_perfil = perfil$profiles[[1]]$displayName,
      bio = perfil$profiles[[1]]$description,
      seguidores = perfil$profiles[[1]]$followersCount,
      seguindo = perfil$profiles[[1]]$followsCount,
      posts = perfil$profiles[[1]]$postsCount,
      criado_em = perfil$profiles[[1]]$createdAt,
      url_perfil = paste0("https://bsky.app/profile/", handle),
      qnt_seguidores_em_comum = perfil$profiles[[1]]$viewer$knownFollowers$count
    )

toJSON(filtragem, pretty = TRUE)
```
filtra as informações dos seguidores em comum entre auth e `did`

```{r}
#| label: vizualiza-seguidores-comum

qnt_seguidores_em_comum <- perfil$profiles[[1]]$viewer$knownFollowers$count

i = 1
while( i <= length(qnt_seguidores_em_comum)){
  filtragem2 <- 
    tibble(
      perfis_comum_did = perfil$profiles[[1]]$viewer$knownFollowers$followers[[i]]$did, 
      perfis_comum_handle = perfil$profiles[[1]]$viewer$knownFollowers$followers[[i]]$handle, 
      perfis_comum_displayName = perfil$profiles[[1]]$viewer$knownFollowers$followers[[i]]$displayName
    )

i = i + 1
}

toJSON(filtragem2, pretty = TRUE)
```


Procurando perfis com uma query específica

```{r}
#| label: search-actors
#| eval: true

procurandoperfis <- 
  bs_search_actors(
    'league of legend', #query == texto da busca
    typeahead = FALSE, #se TRUE, faz uma busca tipo "sugestão enquanto digita" (autocomplete). Padrão: FALSE.
    cursor = NULL, #paginação a parti de uma resposta anterior
    limit = 2,
    auth = auth,
    clean = FALSE
)


toJSON(procurandoperfis, pretty = TRUE)
```




## POSTS


Convertendo um post pela URI

```{r}
#| label: post-uri-to-url
#| 
bs_uri_to_url('at://did:plc:vljand5f4megiw7rj4mpmhaw/app.bsky.feed.post/3l6br5zrsda2r')
```

Convertendo um post pela URL

```{r}
#| label: post-url-to-uri

bs_url_to_uri('https://bsky.app/profile/yasmelins.bsky.social/post/3l6br5zrsda2r', auth = auth)
```


Puxando um post de um usuário

```{r}
#| label: search-posts-by-user

posts_yasmelins <-
  bs_search_posts(
    query = "a",
    author = "yasmelins.bsky.social",
    limit = 1,
    auth = auth
  )

toJSON(posts_yasmelins, pretty = TRUE)
```


Puxando post com query específica

```{r}
#| label: search-posts-by-subject
#| eval: true

posts <- 
  bs_search_posts(
    query = '"league of legends" since:2024-08-30 until:2024-10-08',
    limit = 1,
    auth = auth
  )

toJSON(posts, pretty = TRUE)
```



## CURTIDAS

pegando curtidas (verificar)

- `$feed` = lista
- `$cursor` = key number


tentando pegar curtidas

primeiro você pega os posts de um usuário, e ai você passa a URI para `(bs_get_likes)`

bs_get_likes() não serve para pegar quem curtiu um post, e sim quais posts um usuário curtiu.

Agora, se a sua ideia é descobrir quem curtiu um post específico, a função é outra:

Em geral, a API do Bluesky expõe isso pelo feed/getLikes, que deveria estar implementado como bs_get_post_likes() (ou similar).

Mas na versão bskyr 0.3.0, pelo que vi, ainda não tem função wrapper pronta pra isso.

Então existem 2 opções:

Usar httr2 diretamente pra chamar o endpoint app.bsky.feed.getLikes, passando a URI do post.


```{r}
#| label: get-likes
#| eval: true

likes <- 
  bs_get_likes(
    actor = 'ennoe.bsky.social', #diz de quem você quer pegar os likes, e espera um uri, não um handle
    limit = 3,
    auth = auth
  )

toJSON(likes, pretty = TRUE)
```


```{r}
str(likes)
likes$post_uri



  map_df(
    \(x)
    cat(str(x))
      # tibble(
      #   uri = $post_uri,
      #   cid = x$post_cid,
      #   # handle = x$post_author_handle,
      #   # did = x$post_author_did,
      #   # nome = x$actor$displayName
      # )
  )
```


puxando por httr2

```{r}
#| label: criando-funcao-likes

post_uri <- "at://did:plc:vljand5f4megiw7rj4mpmhaw/app.bsky.feed.post/3l6br5zrsda2r"

# Montando a requisição para o endpoint getLikes
res <- request("https://bsky.social/xrpc/app.bsky.feed.getLikes") |>
  req_auth_bearer_token(auth$accessJwt) |>   # usa o token do bs_auth
  req_url_query(uri = post_uri, limit = 20) |> 
  req_perform()

# Parse do JSON
data <- 
  res |> 
  resp_body_json()

# Transformar em tibble
likes <- map_df(data$likes, function(x) {
  tibble(
    handle = x$actor$handle,
    did = x$actor$did,
    nome = x$actor$displayName
  )
})

toJSON(likes, pretty = TRUE)
```





## SEGUIDORES

`$followers$did` = did
`$followes$handle` = @
`$followers$associated$activitySubscription$allowSubscriptions` = Se follow, seguindo

Seguidores de um usuário


```{r}
#| label: get-followers
#| eval: true

bs_get_followers(
  actor <- did, #não estava funcinando com o handle ou @
  cursor = NULL,
  limit = 3,
  auth = auth,
  clean = FALSE
)  
```

Quem o usuário segue

`$subject$viewer$following` = erro ao puxar
ele também puxa o meu perfil ao final


```{r}
#| label: get-follows
#| eval: true

seguindo <-
  bs_get_follows(
    actor = 'ennoe.bsky.social',
    cursor = NULL,
    limit = 2,
    auth = auth,
    clean = FALSE
  )    

toJSON(seguindo, pretty = TRUE)
```

## REPLIES

→ o pacote bskyr não implementou ainda a função bs_get_replies() (nem bs_get_post_likes()).

ir direto na API oficial do Bluesky usando httr2.

Endpoints úteis da API Bluesky

Quem curtiu um post → app.bsky.feed.getLikes

Thread completa (comentários) → app.bsky.feed.getPostThread

Posts de um autor → app.bsky.feed.getAuthorFeed


pegando os dados de uma função replyes

```{r}
#| label: criando-funcao-reply

# URI do post
post_uri <- "at://did:plc:vljand5f4megiw7rj4mpmhaw/app.bsky.feed.post/3l6br5zrsda2r"

# endpoint: getPostThread
res <- 
  request("https://bsky.social/xrpc/app.bsky.feed.getPostThread") |>
    req_auth_bearer_token(auth$accessJwt) |>
      req_url_query(uri = post_uri, depth = 2) |>
        req_perform()

# parse JSON
thread <- 
  res |> 
  resp_body_json()

# extrair replies diretos
#replies <- map_df(thread$post$repostCount, function(x) {
replies <- map_df(thread$thread$replies, function(x) {
  tibble(
    handle = x$post$author$handle,
    did = x$post$author$did,
    texto = x$post$record$text
  )
})

toJSON(thread, pretty = TRUE)
#print(replies)

```



## COMENTÁRIOS

```{r}
#| label: get-post-thread

thread <- bs_get_post_thread(
  uri = posts_yasmelins$uri,
  auth = auth,
  depth = 4, # profundidade da thread
  clean = FALSE
)

# Extrair autores dos comentários
thread$thread$replies %>% 
  map_df(~ tibble(
    handle = .x$post$author$handle,
    texto = .x$post$record$text
  ))

```

Descobrir de onde está vindo o parâmetro post_yasmelins$uri
